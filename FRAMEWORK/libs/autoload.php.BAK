<?php 
namespace HB\Clementine;

class AutoloaderPsr4 {
	
	/*
	 * String holding the file path containing the libs directories
	 * @var String
	 */
	private $registerFile = DIR_CONFIG.DIR_SLASH."libs.json";
	
	/*
	 * Returns an array from json
	 * @param string $fileName: File name and path
	 * @return array 
	 */
	private function jDecode($fileName){
		$contents = file_get_contents($fileName);
		$json = json_decode($contents, true);
		return $json;
	}
	
	/*
	 * finds a path of a full-qualified class name from the register file
	 * @param string $className: The class name to search
	 * @return array of paths if success or false if failed
	 */
	public function findClass($className){
		
								
		$namespace = substr($className, 0, strrpos($className, "\\"));
		$baseClassName = substr($className, strrpos($className, "\\")+1);		
		
		$json = $this->jDecode($this->registerFile);
		
		if(array_key_exists($namespace, $json)){				
			foreach ($json[$namespace] as $path){												
				if($baseClassName == substr($path, strrpos($path, DIR_SLASH)+1)){
					return $path;
				}								
			}
		}				
		return false;
	}

	/*
	 * Register loader with sp_autoloader
	 */
	public function registerAutoloader(){
		spl_autoload_register(array($this, 'loader'));
	}
	
	/*
	 * look for __init__.json files through file structure  and register classes by 
	 * creating the config/libs.json file
	 * @eturn
	 */
	public function registerClasses(){
		
		$foundPaths = $this->searchFolders(DIR_ROOT, "__init__.json");		
		$namespaces = array();
		
		foreach($foundPaths as $path){			
			$json = $this->jDecode($path.DIR_SLASH."__init__.json");									
			if(!array_key_exists($json['namespace'], $namespaces)){
				$namespaces[$json['namespace']] = array();
			}
			foreach($json["__all__"] as $className){
				array_push($namespaces[$json['namespace']], $path.DIR_SLASH.$className);
			}
		}
		
		//Write the libs.json file
		$fp = fopen(DIR_CONFIG.DIR_SLASH.'libs.json', 'w');
		fwrite($fp, json_encode($namespaces));
		fclose($fp);
	}
	
	/*
	 * Search Recursively for lookup in file structure
	 * @param string $path: the root path of the search
	 * @param string $lookup: the search file
	 * @returns array with directories found
	 */
	public function searchFolders($path, $lookup){
		$filesNPath = scandir($path);
		$foundPaths = array();
		foreach($filesNPath as $file){
			$pointer = $path.DIR_SLASH.$file;
			if(!in_array($file, [".","..",".DS_Store"])){
				if(is_dir($pointer)){			
					$return = $this->searchFolders($pointer, $lookup);
					if(sizeof($return) > 0){
						$foundPaths = array_merge($foundPaths, $return);
					}
				}elseif($file == $lookup){
					array_push($foundPaths, $path);
				}
			}
		}
		return $foundPaths;
	}
	
	
	/*
	 * Loads the class file from the class name
	 * @param string $className: The fully-qualified name
	 * @return boolean: True if sucess, false if fail
	 */
	public function loader($className){						
		$path = $this->findClass($className);				
		
		if(!$path == false){
			$filename = $path . ".php";			
			if(file_exists($filename)){				
				require $filename;
				if(class_exists($className)) {
					return TRUE;
				}
			}
		}
		return FALSE;
	}
}
?>